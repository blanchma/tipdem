# -*- encoding : utf-8 -*-
class Revenue < ActiveRecord::Base
	belongs_to :user
	belongs_to :campaign
  attr_accessor :source, :promotion
  has_one :revenue_commission

  validates_presence_of :source_class, :source_id


  before_create :set_money
  after_create  :check_awards_for_money, :update_promotion_status_for_money


  def set_money
    logger.info "set_money: source_model= #{source_model}, mode= #{campaign.mode}"
    puts "set_money: source_model= #{source_model}, mode= #{campaign.mode}"

    if source_model == ClientPageHit and campaign.mode == CampaignMode::PayPerHit
      logger.info  "Source model is Chain"
      self.money = campaign.budget.pay_per_client_page_hit

    elsif source_model == LandingPageHit and campaign.mode == CampaignMode::PayPerClick
      logger.info  "Source model is LandingPageHit"
      self.money = campaign.budget.pay_per_landing_page_hit

    elsif false #source_model == Post
      logger.info  "Source model is Post"

      if source.published_to_twitter? && !source.revenued_twitter
        logger.info "Published to Twitter"
        money = campaign.budget.pay_per_twitter_contact * user.followers
        self.money += money > 0 ? money : 1
        source.revenued_twitter = true
      end

      if source.published_to_facebook? && !source.revenued_facebook
        logger.info "Published to Facebook"
        money = campaign.budget.pay_per_facebook_contact * user.friends
        self.money += money > 0 ? money : 1
        source.revenued_facebook = true
      end


    else
      logger.info  "Source model is unknown #{source_model}"
      return false
    end

    return false if self.money <= 0
  end

  def source_model
    eval(source_class) if source_class
  end

  def source=(source)
    if source && source.id
      self.source_class=source.class.to_s
      self.source_id=source.id
    end
  end

  def source
    if source_class && source_id
      source_model = eval(source_class)
      return source_model.find source_id
    end
  end

  def promotion
    @promotion ||= user.promotions.find_or_create_by_campaign_id self.campaign_id
  end

  def check_awards_for_money
    return if self.money == 0

    logger.debug "Dinero en la campa単a #{campaign.id}-#{campaign.name}: " , campaign.budget.current
    logger.debug "Dinero total en la campa単a #{campaign.id}-#{campaign.name}: " , campaign.budget.total

    if  campaign.budget.current > self.money
      campaign.budget.update_attribute(:spent, campaign.budget.spent + self.money)
      logger.debug "Dinero gastado luego del update por la campa単a #{campaign.id}-#{campaign.name}: " , campaign.budget.spent
      create_revenue_commision
    else
    	#campaign.update_attribute(:active, false)
      campaign.update_attribute(:status, CampaignStatus::OutOfMoney)
      logger.info "Campa単a #{campaign.id}-#{campaign.name} se quedo sin fondos."
    end

  end

  def update_promotion_status_for_money
    return if self.money == 0
    revenued_money  = self.money - ((self.money * campaign.commission) / 100.00)
    #promotion.update_attribute(:current_money, promotion.current_money + self.money)
    promotion.update_attribute(:current_money, promotion.current_money + revenued_money)
    #Evaluar hacer un sum en el campo current_money y no actualizar este campo
    user.update_attribute(:current_money, user.current_money + revenued_money)
  end

  def create_revenue_commision
    return if self.money == 0
    fee = (self.money * campaign.commission) / 100.00
    RevenueCommission.create(:revenue => self, :campaign => campaign, :money => fee)
  end

  ######DEPRECATED########
  def check_awards_for_points
    logger.info "Chequeando que haya premios"
    #Si hay algun premio, deberia mandar correo pero debemos chequear que no rompa las bolas cada 5'

    if campaign.reference.max_points_to_reward < promotion.current_points
      #Loco deja de juntar puntos porque ya ganaste el premio MAYOR
      #TODO TINCHO SEND EMAIL
    elsif campaign.reference.min_points_to_reward < promotion.current_points
      #Vieja, ya tenes puntos suficientes para llevarte algo. Visita la solapa de premios.
      #TODO TINCHO SEND EMAIL
    end

  end

  ##########DEPRECATED#############
  def update_promotion_status_for_points
    promotion.update_attribute(:current_points, promotion.current_points += self.points)
  end

  #########DEPRECATED###########
  def set_points
    campaign.reference

    #Revenue generated by a Chain
    if source_model == Chain
      logger.info  "Source model is Chain"
      self.points = campaign.reference.point_per_fish

      #Revenue generated by a LandingPageHit
    elsif source_model == LandingPageHit
      logger.info  "Source model is LandingPageHit"
      #self.points = campaign.reference.point_per_landing_hit
      self.points = campaign.reference.pay_per_landing_page_hit



      #Revenue generated by a Post
    elsif source_model == Post
      logger.info  "Source model is Post"

      if source.published_to_twitter? && !source.revenued_twitter
        logger.info "Published to Twitter"
        points = campaign.reference.point_per_twitter_friend * user.followers
        self.points += points > 0 ? points : 1
        source.revenued_twitter = true
      end

      if source.published_to_facebook? && !source.revenued_facebook
        logger.info "Published to Facebook"
        points = campaign.reference.point_per_facebook_friend * user.friends
        self.points += points > 0 ? points : 1
        source.revenued_facebook = true
      end

    else
      logger.info  "Source model is unknown"
      return false
    end

    return false if self.points < 1
  end




end


# == Schema Information
#
# Table name: revenues
#
#  id           :integer(4)      not null, primary key
#  campaign_id  :integer(4)
#  user_id      :integer(4)
#  mode         :string(255)
#  money        :decimal(8, 2)   default(0.0)
#  points       :integer(4)      default(0)
#  source_class :string(255)
#  source_id    :integer(4)
#  created_at   :datetime
#  updated_at   :datetime
#

